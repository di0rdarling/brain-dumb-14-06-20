{"version":3,"sources":["context/taskContext.tsx","components/taskContainer.tsx","context/postListContext.tsx","components/postContainer.tsx","context/notesListContext.tsx","components/noteContainer.tsx","domain/objects/subObjects/objectType.ts","integration/boardStore.ts","context/boardContext.tsx","components/homepage.tsx","context/globalBoardProvider.tsx","App.tsx","index.tsx"],"names":["TaskListStateContext","React","createContext","undefined","TaskDispatchContext","TaskListProvider","props","useReducer","taskListReducer","taskListState","dispatch","board","children","useEffect","boardName","taskList","tasks","key","payload","Provider","value","state","action","id","index","findIndex","task","updatedTask","splice","updateTask","taskId","TaskContainer","context","useContext","Error","useTaskListState","Box","map","Typography","subObjectDisplayValue","tag","taskLinks","taskContent","PostListStateContext","PostDispatchContext","PostListProvider","postListReducer","postListState","postList","posts","post","updatedPost","updatePost","postId","PostContainer","usePostListState","postTitle","NotesListStateContext","NoteDispatchContext","NotesListProvider","notesListReducer","noteslistState","notesList","notes","note","updatedNote","updateNote","noteId","NoteContainer","useNoteListState","content","additionalNotes","ObjectType","faker","require","BoardStateContext","BoardDispatchContext","BoardProvider","boardReducer","boardState","boardCreatedByUser","name","findName","createdAuthor","modifiedAuthor","lorem","sentence","objectType","NOTE","word","TASK","POST","useBoardState","useBoardDispatch","useStyles","makeStyles","objectsWrapper","display","Homepage","classes","boardDispatch","handleBoardNameInputChange","event","target","TextField","onChange","Button","onClick","className","GlobalBoardProvider","App","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.2318f5c7.chunk.js","sourcesContent":["import React, { useEffect, ReactNode } from \"react\";\nimport { Task } from \"../domain/objects/subObjects/task/task\";\nimport { Board } from \"../domain/board\";\n\ntype TaskListState = Task[];\nconst TaskListStateContext = React.createContext<TaskListState | undefined>(undefined);\nconst TaskDispatchContext = React.createContext<TaskDispatch | undefined>(\n  undefined\n);\ninterface TaskListProviderProps {\n  board: Board;\n  children: ReactNode;\n}\n\nexport default function TaskListProvider(props: TaskListProviderProps) {\n  const [taskListState, dispatch] = React.useReducer(taskListReducer, []);\n\n  let { board, children } = props;\n  useEffect(() => {\n    if (board.boardName) {\n      let taskList: Task[] = board.tasks;\n      dispatch({\n        key: \"set tasks\",\n        payload: taskList\n      });\n    }\n  }, [board]);\n\n  return (\n    <TaskListStateContext.Provider value={taskListState}>\n      <TaskDispatchContext.Provider value={dispatch}>\n        {children}\n      </TaskDispatchContext.Provider>\n    </TaskListStateContext.Provider>\n  );\n}\n\nexport function useTaskListState() {\n  const context = React.useContext(TaskListStateContext);\n  if (context === undefined) {\n    throw new Error(\"useTaskListState must be used within a TaskListProvider\");\n  }\n  return context;\n}\n\nexport function useTaskDispatch() {\n  const context = React.useContext(TaskDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useTaskDispatch must be used within a TaskProvider\");\n  }\n  return context;\n}\n\ntype TaskListAction =\n  | { key: \"set tasks\"; payload: Task[] }\n  | { key: \"update tasks\"; payload: Task[] }\n  | { key: \"update task\"; payload: { taskId: number; key: keyof Task; value: any } };\n\ntype TaskDispatch = (action: TaskListAction) => void;\n\nfunction taskListReducer(state: TaskListState, action: TaskListAction): Task[] {\n  switch (action.key) {\n    case \"set tasks\":\n      return action.payload;\n    case \"update tasks\":\n      return action.payload;\n    case \"update task\":\n      return updateTask(state, action.payload.taskId, action.payload.key, action.payload.value)\n  }\n}\n\nfunction updateTask(state: TaskListState, id: number, key: keyof Task, value: any) {\n\n  let index = state.findIndex(task => task.id === id)\n  let task = state[index];\n  let updatedTask = { ...task, [key]: value }\n  state.splice(index, 1);\n  return [...state, updatedTask];\n}\n","import React from \"react\";\nimport { useTaskListState } from \"../context/taskContext\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { Task } from \"../domain/objects/subObjects/task/task\";\n\nexport default function TaskContainer() {\n  let tasks: Task[] = useTaskListState();\n\n  return (\n    <Box>\n      {tasks && (\n        <Box>\n          {tasks.map(task => (\n            <Box>\n              <Typography>{task.subObjectDisplayValue}</Typography>\n              <Typography>Tag: {task.tag}</Typography>\n              {task.taskLinks && (\n                <Box>\n                  <Typography>Task: {task.taskLinks[0].task}</Typography>\n                  <Typography>Task link: {task.taskLinks[0].taskContent}</Typography>\n                </Box>\n              )}\n            </Box>\n\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n}\n","import React, { useEffect, ReactNode } from \"react\";\nimport { Post } from \"../domain/objects/subObjects/post\";\nimport { Board } from \"../domain/board\";\n\ntype PostListState = Post[];\n\nconst PostListStateContext = React.createContext<PostListState | undefined>(undefined);\nconst PostDispatchContext = React.createContext<PostDispatch | undefined>(\n  undefined\n);\ninterface PostListProviderProps {\n  board: Board;\n  children: ReactNode;\n}\n\nexport default function PostListProvider(props: PostListProviderProps) {\n  const [postListState, dispatch] = React.useReducer(postListReducer, []);\n  let { board } = props;\n  useEffect(() => {\n    if (board.boardName) {\n      let postList: Post[] = board.posts;\n      dispatch({\n        key: \"set posts\",\n        payload: postList\n      });\n    }\n  }, [board]);\n\n  return (\n    <PostListStateContext.Provider value={postListState}>\n      <PostDispatchContext.Provider value={dispatch}>\n        {props.children}\n      </PostDispatchContext.Provider>\n    </PostListStateContext.Provider>\n  );\n}\n\nexport function usePostListState() {\n  const context = React.useContext(PostListStateContext);\n  if (context === undefined) {\n    throw new Error(\"usePostListState must be used within a PostlistProvider\");\n  }\n  return context;\n}\n\nexport function usePostDispatch() {\n  const context = React.useContext(PostDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"usePostDispatch must be used within a PostlistProvider\");\n  }\n  return context;\n}\n\ntype PostListAction =\n  | { key: \"set posts\"; payload: Post[] }\n  | { key: \"update posts\"; payload: Post[] }\n  | { key: \"update post\"; payload: { postId: number; key: keyof Post; value: any } };\n\ntype PostDispatch = (action: PostListAction) => void;\n\nfunction postListReducer(state: PostListState, action: PostListAction): Post[] {\n  switch (action.key) {\n    case \"set posts\":\n      return action.payload;\n    case \"update posts\":\n      return action.payload;\n    case \"update post\":\n      return updatePost(state, action.payload.postId, action.payload.key, action.payload.value)\n\n  }\n}\n\nfunction updatePost(state: PostListState, id: number, key: keyof Post, value: any) {\n\n  let index = state.findIndex(post => post.id === id)\n  let post = state[index];\n  let updatedPost = { ...post, [key]: value }\n  state.splice(index, 1);\n  return [...state, updatedPost];\n}\n","import React from \"react\";\nimport { usePostListState } from \"../context/postListContext\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { Post } from \"../domain/objects/subObjects/post\";\n\nexport default function PostContainer() {\n  let posts: Post[] = usePostListState();\n\n  return (\n    <Box>\n      {posts && (\n        <Box>\n          {posts.map(post => (\n            <Box>\n              <Typography>{post.subObjectDisplayValue}</Typography>\n              <Typography>Post title: {post.postTitle}</Typography>\n            </Box>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n}\n","import React, { useEffect, ReactNode } from \"react\";\nimport { Note } from \"../domain/objects/subObjects/note\";\nimport { Board } from \"../domain/board\";\n\ntype NotesListState = Note[];\n\nconst NotesListStateContext = React.createContext<NotesListState | undefined>(undefined);\nconst NoteDispatchContext = React.createContext<NoteDispatch | undefined>(\n  undefined\n);\ninterface NotesListProviderProps {\n  board: Board;\n  children: ReactNode;\n}\n\nexport default function NotesListProvider(props: NotesListProviderProps) {\n  const [noteslistState, dispatch] = React.useReducer(notesListReducer, []);\n  let { board, children } = props;\n  useEffect(() => {\n    if (board.boardName) {\n      let notesList: Note[] = board.notes;\n      dispatch({\n        key: \"set notes\",\n        payload: notesList\n      });\n    }\n  }, [board]);\n\n  return (\n    <NotesListStateContext.Provider value={noteslistState}>\n      <NoteDispatchContext.Provider value={dispatch}>\n        {children}\n      </NoteDispatchContext.Provider>\n    </NotesListStateContext.Provider>\n  );\n}\n\nexport function useNoteListState() {\n  const context = React.useContext(NotesListStateContext);\n  if (context === undefined) {\n    throw new Error(\"useNoteListState must be used within a NotesListProvider\");\n  }\n  return context;\n}\n\nexport function useNoteDispatch() {\n  const context = React.useContext(NoteDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useNoteDispatch must be used within a NoteProvider\");\n  }\n  return context;\n}\n\ntype NoteListAction =\n  | { key: \"set notes\"; payload: Note[] }\n  | { key: \"update notes\"; payload: Note[] }\n  | { key: \"update note\"; payload: { noteId: number; key: keyof Note; value: any } };\n\ntype NoteDispatch = (action: NoteListAction) => void;\n\nfunction notesListReducer(state: NotesListState, action: NoteListAction): Note[] {\n  switch (action.key) {\n    case \"set notes\":\n      return action.payload;\n    case \"update notes\":\n      return action.payload;\n    case \"update note\":\n      return updateNote(state, action.payload.noteId, action.payload.key, action.payload.value)\n  }\n}\n\nfunction updateNote(state: NotesListState, id: number, key: keyof Note, value: any) {\n\n  let index = state.findIndex(note => note.id === id)\n  let note = state[index];\n  let updatedNote = { ...note, [key]: value }\n  state.splice(index, 1);\n  return [...state, updatedNote];\n}\n","import React from \"react\";\nimport { useNoteListState } from \"../context/notesListContext\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { Note } from \"../domain/objects/subObjects/note\";\n\nexport default function NoteContainer() {\n  let notes: Note[] = useNoteListState();\n\n  return (\n    <Box>\n      {notes && (\n        <Box>\n          {notes.map(note => (\n            <Box>\n              <Typography>{note.subObjectDisplayValue}</Typography>\n              <Typography>Content: {note.content}</Typography>\n              <Typography>Additional Notes: {note.additionalNotes}</Typography>\n            </Box>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n}\n","export enum ObjectType {\n  POST = \"POST\",\n  TASK = \"TASK\",\n  NOTE = \"NOTE\"\n}\n","import { Board } from \"../domain/board\";\nimport { ObjectType } from \"../domain/objects/subObjects/objectType\";\nvar faker = require(\"faker\");\n\nexport function getBoard(): Board {\n  let board: Board = {\n    boardName: \"Test board\",\n    boardCreatedByUser: faker.name.findName(),\n    notes: [{\n      id: 1,\n      createdAuthor: faker.name.findName(),\n      modifiedAuthor: faker.name.findName(),\n      content: faker.lorem.sentence(),\n      additionalNotes: faker.lorem.sentence(),\n      objectType: ObjectType.NOTE\n    }, {\n      id: 2,\n      createdAuthor: faker.name.findName(),\n      modifiedAuthor: faker.name.findName(),\n      content: faker.lorem.sentence(),\n      additionalNotes: faker.lorem.sentence(),\n      objectType: ObjectType.NOTE\n    }],\n    tasks: [{\n      id: 1,\n      createdAuthor: faker.name.findName(),\n      modifiedAuthor: faker.name.findName(),\n      content: faker.lorem.sentence(),\n      tag: faker.lorem.word(),\n      taskLinks: [\n        {\n          task: faker.lorem.sentence(),\n          taskContent: faker.lorem.sentence()\n        }\n      ],\n      objectType: ObjectType.TASK\n    }, {\n      id: 2,\n      createdAuthor: faker.name.findName(),\n      modifiedAuthor: faker.name.findName(),\n      content: faker.lorem.sentence(),\n      tag: faker.lorem.word(),\n      taskLinks: [\n        {\n          task: faker.lorem.sentence(),\n          taskContent: faker.lorem.sentence()\n        }\n      ],\n      objectType: ObjectType.TASK\n    }],\n    posts: [{\n      id: 1,\n      createdAuthor: faker.name.findName(),\n      modifiedAuthor: faker.name.findName(),\n      content: faker.lorem.sentence(),\n      postTitle: faker.lorem.word(),\n      objectType: ObjectType.POST\n    }, {\n      id: 2,\n      createdAuthor: faker.name.findName(),\n      modifiedAuthor: faker.name.findName(),\n      content: faker.lorem.sentence(),\n      postTitle: faker.lorem.word(),\n      objectType: ObjectType.POST\n    }]\n  };\n\n  return board;\n}\n","import React, { useEffect, ReactNode } from \"react\";\nimport { getBoard } from \"../integration/boardStore\";\nimport { Board } from \"../domain/board\";\n\ntype BoardState = Board;\n\nconst BoardStateContext = React.createContext<Board>({} as BoardState);\nconst BoardDispatchContext = React.createContext<BoardDispatch>(\n  {} as BoardDispatch\n);\n\ninterface BoardProviderProps {\n  children: ReactNode;\n}\n\nexport default function BoardProvider(props: BoardProviderProps) {\n  const [boardState, dispatch] = React.useReducer(boardReducer, {} as Board);\n\n  let { children } = props;\n  useEffect(() => {\n    let board: Board = getBoard();\n    dispatch({\n      key: \"set board\",\n      payload: board\n    });\n  }, []);\n\n  return (\n    <BoardStateContext.Provider value={boardState}>\n      <BoardDispatchContext.Provider value={dispatch}>\n        {children}\n      </BoardDispatchContext.Provider>\n    </BoardStateContext.Provider>\n  );\n}\n\nexport function useBoardState() {\n  const context = React.useContext(BoardStateContext);\n  if (context === undefined) {\n    throw new Error(\"useBoardState must be used within a BoardProvider\");\n  }\n  return context;\n}\n\nexport function useBoardDispatch() {\n  const context = React.useContext(BoardDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useBoardDispatch must be used within a BoardProvider\");\n  }\n  return context;\n}\n\nexport function useBoard() {\n  return [useBoardState(), useBoardDispatch()];\n}\n\ntype BoardAction =\n  | { key: \"set board\"; payload: Board }\n  | { key: \"update board\"; payload: { key: keyof Board; payload: any } };\n\nexport type BoardDispatch = (action: BoardAction) => void;\n\nfunction boardReducer(state: BoardState, action: BoardAction): Board {\n  switch (action.key) {\n    case \"set board\":\n      return action.payload;\n    case \"update board\":\n      return { ...state, [action.payload.key]: action.payload.payload }\n  }\n}\n","import React from \"react\";\nimport {\n  Box,\n  makeStyles,\n  TextField,\n  Button\n} from \"@material-ui/core\";\nimport TaskContainer from \"./taskContainer\";\nimport PostContainer from \"./postContainer\";\nimport NoteContainer from \"./noteContainer\";\nimport {\n  useBoardState,\n  useBoardDispatch,\n  BoardDispatch\n} from \"../context/boardContext\";\nimport { Board } from \"../domain/board\";\n\nconst useStyles = makeStyles({\n  objectsWrapper: {\n    display: 'flex'\n  }\n});\n\nexport default function Homepage() {\n  let classes = useStyles();\n  let board: Board = useBoardState()\n  let boardDispatch: BoardDispatch = useBoardDispatch()\n  let boardName = '';\n\n  const handleBoardNameInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    boardName = event.target.value\n  }\n\n  const updateName = () => {\n    boardDispatch({\n      key: 'update board',\n      payload: {\n        key: 'boardName',\n        payload: boardName\n      }\n    })\n  }\n\n  if (board.boardName) {\n    return (\n      <Box>\n        <h1>{board.boardName}</h1>\n        <TextField\n          onChange={handleBoardNameInputChange}\n        />\n        <Button onClick={() => updateName()}>UPDATE NAME</Button>\n        <h2>{board.boardCreatedByUser}</h2>\n        <Box className={classes.objectsWrapper}>\n          <NoteContainer />\n          <TaskContainer />\n          <PostContainer />\n        </Box>\n      </Box>\n    );\n  } else {\n    return <h1>No board Found</h1>;\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { Board } from \"../domain/board\";\nimport { useBoardState } from \"./boardContext\";\nimport TaskProvider from \"./taskContext\";\nimport NotesListProvider from \"./notesListContext\";\nimport PostListProvider from \"./postListContext\";\n\ninterface GlobalBoardProviderProps {\n  children: ReactElement;\n}\nexport default function GlobalBoardProvider(props: GlobalBoardProviderProps) {\n  let board: Board = useBoardState();\n\n  return (\n    <Box>\n      {board && (\n        <TaskProvider board={board}>\n          <NotesListProvider board={board}>\n            <PostListProvider board={board}>{props.children}</PostListProvider>\n          </NotesListProvider>\n        </TaskProvider>\n      )}\n    </Box>\n  );\n}\n","import * as React from \"react\";\nimport Homepage from \"./components/homepage\";\nimport GlobalBoardProvider from \"./context/globalBoardProvider\";\nimport BoardProvider from \"./context/boardContext\";\n\nexport default function App() {\n  return (\n    <BoardProvider>\n      <GlobalBoardProvider>\n        <Homepage />\n      </GlobalBoardProvider>\n    </BoardProvider>\n  );\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}